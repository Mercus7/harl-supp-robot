import logging
from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, admin
import keyboard as kb
import functions as func
import sqlite3
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.utils.exceptions import Throttled

storage = MemoryStorage()
logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=storage)
connection = sqlite3.connect('data.db')
q = connection.cursor()

class st(StatesGroup):
	item = State()
	item2 = State()
	item3 = State()
	item4 = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.</b>', reply_markup=kb.menu, parse_mode='HTML')
		else:
			await message.answer('<b>üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –µ—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å</b>\n\n<b>üöÄ –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –±—ã—Å—Ç–µ–π –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∫–∞–∫ –æ—Å–≤–æ–±–æ–∂—É—Å—å.</b>', parse_mode='HTML')
	else:
		await message.answer('<b<‚ùóÔ∏è–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ.</b>', parse_mode='HTML')


@dp.message_handler(content_types=['text'], text='‚ùáÔ∏è–ê–¥–º–∏–Ω–∫–∞')
async def handfler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>', reply_markup=kb.adm, parse_mode='HTML')

@dp.message_handler(content_types=['text'], text='¬´ –ù–∞–∑–∞–¥')
async def handledr(message: types.Message, state: FSMContext):
	await message.answer('<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä</b>', parse_mode='HTML', reply_markup=kb.menu)

@dp.message_handler(content_types=['text'], text='‚ñ™Ô∏è–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
async def handlaer(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			q.execute(f"SELECT * FROM users WHERE block == 1")
			result = q.fetchall()
			sl = []
			for index in result:
				i = index[0]
				sl.append(i)

			ids = '\n'.join(map(str, sl))
			await message.answer(f'*üìã ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ß–°:*\n`{ids}`', parse_mode='Markdown')

@dp.message_handler(content_types=['text'], text='üî∫–î–æ–±–∞–≤–∏—Ç—å –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫')
async def hanadler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('<b>üíÅ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:</b>', reply_markup=kb.back, parse_mode='HTML')
			await st.item3.set()

@dp.message_handler(content_types=['text'], text='üîª–£–±—Ä–∞—Ç—å –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞')
async def hfandler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('<b>üíÅ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å:</b>', reply_markup=kb.back, parse_mode='HTML')
			await st.item4.set()

@dp.message_handler(content_types=['text'], text='üìß–†–∞—Å—Å—ã–ª–∫–∞')
async def hangdler(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			await message.answer('<b>üíÅ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –≤–Ω–∏–∑—É üëá</b>', reply_markup=kb.back, parse_mode='HTML')
			await st.item.set()

@dp.message_handler(content_types=['text'])
@dp.throttled(func.antiflood, rate=3)
async def h(message: types.Message, state: FSMContext):
	func.join(chat_id=message.chat.id)
	q.execute(f"SELECT block FROM users WHERE user_id = {message.chat.id}")
	result = q.fetchone()
	if result[0] == 0:
		if message.chat.id == admin:
			pass
		else:
			await message.answer('<b>‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ –µ—ë –æ—Ç–≤–µ—Ç–∞...</b>\n\n<i>‚ö†Ô∏è –ü—Ä–æ—Å—å–±–∞: –Ω–µ —Ñ–ª—É–¥–∏—Ç–µ, –æ—Ç–≤–µ—á—é –≤—Å–µ–º! –ë—É–¥–∏—Ç–µ —Å–ø–∞–º–∏—Ç—å —É–ª–µ—Ç–∏—Ç–µ –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.</i>', parse_mode='HTML')
			await bot.send_message(admin, f"*üõé –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å*\n*–û—Ç:* {message.from_user.mention}\nID: `{message.chat.id}`\n*–°–æ–æ–±—â–µ–Ω–∏–µ:* {message.text}", reply_markup=kb.fun(message.chat.id), parse_mode='Markdown')
	else:
		await message.answer('<b<‚ùóÔ∏è–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ</b>', parse_mode='HTML')


@dp.callback_query_handler(lambda call: True) # Inline —á–∞—Å—Ç—å
async def cal(call, state: FSMContext):
	if 'ans' in call.data:
		a = call.data.index('-ans')
		ids = call.data[:a]
		await call.message.answer('<i>üíÅ‚Äç‚ôÇÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:</i>', reply_markup=kb.back, parse_mode='HTML')
		await st.item2.set() # –∞–¥–º–∏–Ω –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		await state.update_data(uid=ids)
	elif 'ignor' in call.data:
		await call.answer('–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ')
		await bot.delete_message(call.message.chat.id, call.message.message_id)
		await state.finish()

@dp.message_handler(state=st.item2)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '‚õîÔ∏è–û—Ç–º–µ–Ω–∞':
		await message.answer('<b>‚ùóÔ∏è–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', reply_markup=kb.menu, parse_mode='HTML')
		await state.finish()
	else:
		await message.answer('<b>‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>', reply_markup=kb.menu, parse_mode='HTML')
		data = await state.get_data()
		id = data.get("uid")
		await state.finish()
		await bot.send_message(id, '<i>üõé –í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª –æ—Ç–≤–µ—Ç:</i>\n\n<b>{}</b>' .format(message.text), parse_mode='HTML')
@dp.message_handler(state=st.item)
async def process_name(message: types.Message, state: FSMContext):
	q.execute(f'SELECT user_id FROM users')
	row = q.fetchall()
	connection.commit()
	text = message.text
	if message.text == '‚õîÔ∏è–û—Ç–º–µ–Ω–∞':
		await message.answer('<b>‚ùóÔ∏è–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', reply_markup=kb.adm, parse_mode='HTML')
		await state.finish()
	else:
		info = row
		await message.answer('<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞</b>', reply_markup=kb.adm, parse_mode='HTML')
		for i in range(len(info)):
			try:
				await bot.send_message(info[i][0], str(text))
			except:
				pass
		await message.answer('<b>‚ùóÔ∏è–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>', reply_markup=kb.adm, parse_mode='HTML')
		await state.finish()


@dp.message_handler(state=st.item3)
async def proce(message: types.Message, state: FSMContext):
	if message.text == '‚õîÔ∏è–û—Ç–º–µ–Ω–∞':
		await message.answer('<b>‚ùóÔ∏è–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', reply_markup=kb.adm, parse_mode='HTML')
		await state.finish()
	else:
		if message.text.isdigit():
			q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
			result = q.fetchall()
			connection.commit()
			if len(result) == 0:
				await message.answer('<b>‚ö†Ô∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>', reply_markup=kb.adm, parse_mode='HTML')
				await state.finish()
			else:
				a = result[0]
				id = a[0]
				if id == 0:
					q.execute(f"UPDATE users SET block = 1 WHERE user_id = {message.text}")
					connection.commit()
					await message.answer('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>', reply_markup=kb.adm, parse_mode='HTML')
					await state.finish()
					await bot.send_message(message.text, '<b>‚ùóÔ∏è–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –¥–∞–Ω–Ω–æ–º –±–æ—Ç–µ</b>', parse_mode='HTML')
				else:
					await message.answer('<b>‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∏–º–µ–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫—É</b>', reply_markup=kb.adm, parse_mode='HTML')
					await state.finish()
		else:
			await message.answer('<b>‚ö†Ô∏è–¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã!\n\n–í–≤–µ–¥–∏ ID:</b>', parse_mode='HTML')

@dp.message_handler(state=st.item4)
async def proc(message: types.Message, state: FSMContext):
	if message.text == '‚õîÔ∏è–û—Ç–º–µ–Ω–∞':
		await message.answer('<b>‚ùóÔ∏è–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>', reply_markup=kb.adm, parse_mode='HTML')
		await state.finish()
	else:
		if message.text.isdigit():
			q.execute(f"SELECT block FROM users WHERE user_id = {message.text}")
			result = q.fetchall()
			connection.commit()
			if len(result) == 0:
				await message.answer('<b>‚ö†Ô∏è –¢–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö</b>', reply_markup=kb.adm, parse_mode='HTML')
				await state.finish()
			else:
				a = result[0]
				id = a[0]
				if id == 1:
					q.execute(f"UPDATE users SET block = 0 WHERE user_id = {message.text}")
					connection.commit()
					await message.answer('<b>‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–∞–Ω–µ–Ω</b>', reply_markup=kb.adm, parse_mode='HTML')
					await state.finish()
					await bot.send_message(message.text, '<b>‚ùóÔ∏è–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π</b>', parse_mode='HTML')
				else:
					await message.answer('<b>‚ö†Ô∏è –î–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω</b>', reply_markup=kb.adm, parse_mode='HTML')
					await state.finish()
		else:
			await message.answer('<b>‚ö†Ô∏è –¢—ã –≤–≤–æ–¥–∏—à—å –±—É–∫–≤—ã!\n\n–í–≤–µ–¥–∏ ID:</b>', parse_mode='HTML')

if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)
